---
const today = new Date();
---

<footer class="relative overflow-hidden bg-black p-8">
    <canvas id="saddle-canvas" class="absolute inset-0 w-full md:w-1/2 h-full"></canvas>
    <div class="absolute inset-0 bg-gradient-to-r from-cyan-900/10 via-purple-900/10 to-cyan-900/10 animate-gradient">
    </div>

    <div class="relative flex flex-col justify-center min-h-[200px] max-w-5xl mx-auto">
        <div class="flex flex-col sm:flex-row gap-2 justify-between">
            <p class="text-xs text-gray-400">
                &copy; {today.getFullYear()} Josue Montano. All rights reserved.
            </p>
            <div class="flex gap-4 text-xs">
                <a target="_blank" href="https://github.com/josuemontano" class="social-link">GitHub</a>
                <a target="_blank" href="https://linkedin.com/in/josuemontanoa" class="social-link">LinkedIn</a>
                <a target="_blank" href="https://x.com/josuemontano10" class="social-link">X</a>
            </div>
        </div>
    </div>

    <script>
        if (typeof window !== "undefined") {
            const canvas = document.getElementById("saddle-canvas");
            const ctx = canvas.getContext("2d");

            let width, height;
            function resize() {
                width = canvas.width = canvas.offsetWidth;
                height = canvas.height = canvas.offsetHeight;
            }
            window.addEventListener("resize", resize);
            resize();

            const points = [];
            const cols = 30;
            const rows = 40;
            const spacing = 20;
            const amplitude = 60;
            let t = 0;

            for (let i = 0; i < cols; i++) {
                for (let j = 0; j < rows; j++) {
                    points.push({ x: i - cols / 2, y: j - rows / 2 });
                }
            }

            function draw() {
                ctx.clearRect(0, 0, width, height);
                ctx.strokeStyle = "rgba(0, 255, 255, 0.25)";
                ctx.lineWidth = 1;

                ctx.beginPath();
                for (const p of points) {
                    const X = p.x * spacing;
                    const Y = p.y * spacing;
                    const Z = (p.x ** 2 - p.y ** 2) * 0.05 * amplitude * Math.sin(t + (p.x + p.y) * 0.1);

                    const scale = 800 / (800 + Z + 200);
                    const screenX = width / 2 + X * scale;
                    const screenY = height / 2 + Y * scale;

                    ctx.moveTo(screenX, screenY);
                    ctx.arc(screenX, screenY, 1, 0, Math.PI * 2);
                }
                ctx.stroke();

                t += 0.001;
                requestAnimationFrame(draw);
            }

            draw();
        }
    </script>
</footer>

<style>
    @keyframes gradient-move {
        0% {
            background-position: 0% 50%;
        }
        50% {
            background-position: 100% 50%;
        }
        100% {
            background-position: 0% 50%;
        }
    }

    .animate-gradient {
        background-size: 200% 200%;
        animation: gradient-move 10s ease infinite;
    }
</style>
